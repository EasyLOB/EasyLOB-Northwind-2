@model OrderCollectionModel

@{
    string CSHTML = "_OrderCollection.cshtml";

    string query = "";
    if (Model.MasterCustomerId != null)
    {
        query = String.Format("ej.Query().where(\"CustomerId\", ej.FilterOperators.equal, \"{0}\")", Model.MasterCustomerId);
    }
    else if (Model.MasterEmployeeId != null)
    {
        query = String.Format("ej.Query().where(\"EmployeeId\", ej.FilterOperators.equal, {0})", Model.MasterEmployeeId);
    }
    else if (Model.MasterShipVia != null)
    {
        query = String.Format("ej.Query().where(\"ShipVia\", ej.FilterOperators.equal, {0})", Model.MasterShipVia);
    }
}

<div id="Collection_Order">
    @(Html.EJ().Grid<Order>("Grid_Order")
        //.Datasource(datasource => datasource
        //    .Adaptor(AdaptorType.UrlAdaptor)
        //    .URL(Url.Action("DataSource", "Order"))
        //)
        .Query(query)        
        .AllowFiltering()
        .AllowGrouping()
        .AllowPaging()
        .AllowReordering()
        //.AllowResizeToFit()
        .AllowResizing()
        //.AllowScrolling()
        .AllowSearching()
        .AllowSorting()
        .AllowTextWrap()
        .TextWrapSettings(wrap =>
        {
            wrap.WrapMode(WrapMode.Both);
        })                    
        .ClientSideEvents(clientEvent => clientEvent
            .ActionBegin("actionBegin_Grid_Order")
            .ActionFailure("actionFailure_Grid_Order")
            .Load("load_Grid_Order")
            .ToolbarClick("toolbarClick_Grid_Order")
        )
        .Columns(column =>
        {
            column.Field("OrderId")
                .AllowEditing(false)
                .EditType(EditingType.Numeric)
                .Format(SyncfusionPatternResources.GridFormat_Integer)
                .HeaderText(OrderResources.PropertyOrderId)
                .IsIdentity(true)
                .IsPrimaryKey(true)
                .TextAlign(TextAlign.Right)
                .Visible(Order.DataProfile.IsGridVisibleFor("OrderId"))
                .Width(Order.DataProfile.GridWidthFor("OrderId"))
                .Add();
            column.Field("CustomerId")
                .EditType(EditingType.String)
                .HeaderText(OrderResources.PropertyCustomerId)
                .Visible(Order.DataProfile.IsGridVisibleFor("CustomerId"))
                .Width(Order.DataProfile.GridWidthFor("CustomerId"))
                .Add();
            column.Field("CustomerLookupText")
                .AllowEditing(false)
                .HeaderText(CustomerResources.EntitySingular)
                .Visible(Order.DataProfile.IsGridVisibleFor("CustomerLookupText"))
                .Width(Order.DataProfile.GridWidthFor("CustomerLookupText"))
                .Add();
            column.Field("EmployeeId")
                .EditType(EditingType.Numeric)
                .Format(SyncfusionPatternResources.GridFormat_Integer)
                .HeaderText(OrderResources.PropertyEmployeeId)
                .TextAlign(TextAlign.Right)
                .Visible(Order.DataProfile.IsGridVisibleFor("EmployeeId"))
                .Width(Order.DataProfile.GridWidthFor("EmployeeId"))
                .Add();
            column.Field("EmployeeLookupText")
                .AllowEditing(false)
                .HeaderText(EmployeeResources.EntitySingular)
                .Visible(Order.DataProfile.IsGridVisibleFor("EmployeeLookupText"))
                .Width(Order.DataProfile.GridWidthFor("EmployeeLookupText"))
                .Add();
            column.Field("OrderDate")
                .EditType(EditingType.DateTimePicker)
                .Format(SyncfusionPatternResources.GridFormat_DateTime)
                .HeaderText(OrderResources.PropertyOrderDate)
                .Visible(Order.DataProfile.IsGridVisibleFor("OrderDate"))
                .Width(Order.DataProfile.GridWidthFor("OrderDate"))
                .Add();
            column.Field("RequiredDate")
                .EditType(EditingType.DateTimePicker)
                .Format(SyncfusionPatternResources.GridFormat_DateTime)
                .HeaderText(OrderResources.PropertyRequiredDate)
                .Visible(Order.DataProfile.IsGridVisibleFor("RequiredDate"))
                .Width(Order.DataProfile.GridWidthFor("RequiredDate"))
                .Add();
            column.Field("ShippedDate")
                .EditType(EditingType.DateTimePicker)
                .Format(SyncfusionPatternResources.GridFormat_DateTime)
                .HeaderText(OrderResources.PropertyShippedDate)
                .Visible(Order.DataProfile.IsGridVisibleFor("ShippedDate"))
                .Width(Order.DataProfile.GridWidthFor("ShippedDate"))
                .Add();
            column.Field("ShipVia")
                .EditType(EditingType.Numeric)
                .Format(SyncfusionPatternResources.GridFormat_Integer)
                .HeaderText(OrderResources.PropertyShipVia)
                .TextAlign(TextAlign.Right)
                .Visible(Order.DataProfile.IsGridVisibleFor("ShipVia"))
                .Width(Order.DataProfile.GridWidthFor("ShipVia"))
                .Add();
            column.Field("ShipperLookupText")
                .AllowEditing(false)
                .HeaderText(ShipperResources.EntitySingular)
                .Visible(Order.DataProfile.IsGridVisibleFor("ShipperLookupText"))
                .Width(Order.DataProfile.GridWidthFor("ShipperLookupText"))
                .Add();
            column.Field("Freight")
                .EditType(EditingType.Numeric)
                .Format(SyncfusionPatternResources.GridFormat_Float)
                .HeaderText(OrderResources.PropertyFreight)
                .TextAlign(TextAlign.Right)
                .Visible(Order.DataProfile.IsGridVisibleFor("Freight"))
                .Width(Order.DataProfile.GridWidthFor("Freight"))
                .Add();
            column.Field("ShipName")
                .EditType(EditingType.String)
                .HeaderText(OrderResources.PropertyShipName)
                .Visible(Order.DataProfile.IsGridVisibleFor("ShipName"))
                .Width(Order.DataProfile.GridWidthFor("ShipName"))
                .Add();
            column.Field("ShipAddress")
                .EditType(EditingType.String)
                .HeaderText(OrderResources.PropertyShipAddress)
                .Visible(Order.DataProfile.IsGridVisibleFor("ShipAddress"))
                .Width(Order.DataProfile.GridWidthFor("ShipAddress"))
                .Add();
            column.Field("ShipCity")
                .EditType(EditingType.String)
                .HeaderText(OrderResources.PropertyShipCity)
                .Visible(Order.DataProfile.IsGridVisibleFor("ShipCity"))
                .Width(Order.DataProfile.GridWidthFor("ShipCity"))
                .Add();
            column.Field("ShipRegion")
                .EditType(EditingType.String)
                .HeaderText(OrderResources.PropertyShipRegion)
                .Visible(Order.DataProfile.IsGridVisibleFor("ShipRegion"))
                .Width(Order.DataProfile.GridWidthFor("ShipRegion"))
                .Add();
            column.Field("ShipPostalCode")
                .EditType(EditingType.String)
                .HeaderText(OrderResources.PropertyShipPostalCode)
                .Visible(Order.DataProfile.IsGridVisibleFor("ShipPostalCode"))
                .Width(Order.DataProfile.GridWidthFor("ShipPostalCode"))
                .Add();
            column.Field("ShipCountry")
                .EditType(EditingType.String)
                .HeaderText(OrderResources.PropertyShipCountry)
                .Visible(Order.DataProfile.IsGridVisibleFor("ShipCountry"))
                .Width(Order.DataProfile.GridWidthFor("ShipCountry"))
                .Add();
        })
        .EditSettings(edit => edit
            .AllowAdding()
            .AllowDeleting()
            .AllowEditing()
            .AllowEditOnDblClick(false)
        )
        //.EnablePersistence()
        .IsResponsive()
        .FilterSettings(filter => filter
            .EnableCaseSensitivity(false)
            .FilterType(FilterType.Excel)
            .MaxFilterChoices(AppDefaults.SyncfusionRecordsForFiltering)
        )
        //.Mappers(map => map
        //    .ExportToExcelAction(Url.Content("~/Order/ExportToExcel"))
        //    .ExportToPdfAction(Url.Content("~/Order/ExportToPdf"))
        //    .ExportToWordAction(Url.Content("~/Order/ExportToWord"))
        //)
        .PageSettings(page => page
            .PageSize(AppDefaults.SyncfusionRecordsByPage)
        )
        .ShowColumnChooser()
        .ToolbarSettings(toolbar => toolbar
            .CustomToolbarItems(new List<object>() {
                new Syncfusion.JavaScript.Models.CustomToolbarItem() { TemplateID = "#Grid_Order_Toolbar" }
            })
            .ShowToolbar()
            .ToolbarItems(items =>
            {
                items.AddTool(ToolBarItems.Search);
                items.AddTool(ToolBarItems.Add);
                items.AddTool(ToolBarItems.Edit);
                items.AddTool(ToolBarItems.Delete);
                //items.AddTool(ToolBarItems.ExcelExport);
                //items.AddTool(ToolBarItems.PdfExport);
                //items.AddTool(ToolBarItems.WordExport);
            })
        )
    )
</div>

<script type="text/x-jsrender" id="Grid_Order_Toolbar">
    <div id="Grid_Order_Toolbar_Refresh" class="e-toolbaricons e-icon e-reload" title="@PresentationResources.Refresh"></div>
    <div id="Grid_Order_Toolbar_Read" class="e-toolbaricons e-icon e-document" title="@PresentationResources.Read"></div>
</script>

<script>
    $(function () {
        try {
            ej.widget.init($("#Collection_Order"));

            var model = @Html.Raw(JsonConvert.SerializeObject(Model));
            var dataProfile = @Html.Raw(JsonConvert.SerializeObject(Order.DataProfile));

            zOnCollectionView(model, dataProfile, "@Url.Action("DataSource", "Order")");
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "function", exception));
        }                
    });
    
    function actionBegin_Grid_Order(args) {
        try {
            var model = @Html.Raw(JsonConvert.SerializeObject(Model));
            var masterControllerAction = model.MasterControllerAction == null ? "" : model.MasterControllerAction.toLowerCase();
    
            // Associations (FK)
            var url = "";
            // Customer
            if (model.MasterCustomerId != null) {
                url = url + (url == "" ? "" : "&") + "MasterCustomerId=" + String(model.MasterCustomerId);
            }
            // Employee
            if (model.MasterEmployeeId != null) {
                url = url + (url == "" ? "" : "&") + "MasterEmployeeId=" + String(model.MasterEmployeeId);
            }
            // Shipper
            if (model.MasterShipVia != null) {
                url = url + (url == "" ? "" : "&") + "MasterShipVia=" + String(model.MasterShipVia);
            }

            var isSearch = !model.IsMasterDetail;
            var isCreate = masterControllerAction == "" || masterControllerAction == "update";
            var isRead = masterControllerAction == "" || masterControllerAction == "read" || masterControllerAction == "update" || masterControllerAction == "delete";
            var isUpdate = masterControllerAction == "" || masterControllerAction == "update";
            var isDelete = masterControllerAction == "" || masterControllerAction == "update" || masterControllerAction == "delete";
            switch(args.requestType) {
                case "searching":
                    // Search
                    if (isSearch) {
                        zSearchDictionaryWrite("Order", args.keyValue);
                    }
                    break;
                case "add":
                    // Create
                    if (model.ActivityOperations.IsCreate && isCreate) {
                        $("#ZAjax").load("@(Url.Action("Create", "Order", null, Request.Url.Scheme))" +
                            (url == "" ? "" : "?") + url, function (responseText, textStatus, jqXHR) { zAjaxLoadComplete(responseText, textStatus, jqXHR); });
                    }
                    break;
                case "read":
                    // Read
                    if (model.ActivityOperations.IsRead && isRead) {
                        var data = args.data;
                        if (!ej.isNullOrUndefined(data)) {
                            $("#ZAjax").load("@(Url.Action("Read", "Order", null, Request.Url.Scheme))?OrderId=" + String(data.OrderId) +
                                (url == "" ? "" : "&") + url, function (responseText, textStatus, jqXHR) { zAjaxLoadComplete(responseText, textStatus, jqXHR); });
                        }
                    }
                    break;                        
                case "beginedit":
                    // Update
                    if (model.ActivityOperations.IsUpdate && isUpdate) {
                        var data = this.model.currentViewData[args.rowIndex];
                        if (!ej.isNullOrUndefined(data)) {
                            $("#ZAjax").load("@(Url.Action("Update", "Order", null, Request.Url.Scheme))?OrderId=" + String(data.OrderId) +
                                (url == "" ? "" : "&") + url, function (responseText, textStatus, jqXHR) { zAjaxLoadComplete(responseText, textStatus, jqXHR); });
                        }
                    }
                    break;
                case "delete":
                    // Delete
                    if (model.ActivityOperations.IsDelete && isDelete) {
                        var data = args.data;
                        if (!ej.isNullOrUndefined(data)) {
                            $("#ZAjax").load("@(Url.Action("Delete", "Order", null, Request.Url.Scheme))?OrderId=" + String(data.OrderId) +
                                (url == "" ? "" : "&") + url, function (responseText, textStatus, jqXHR) { zAjaxLoadComplete(responseText, textStatus, jqXHR); });
                        }
                    }
                    break;
            }

            if (args.requestType == "add" || args.requestType == "beginedit" || args.requestType == "delete") {
                args.cancel = true;
            }
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "actionBegin_Grid_Order", exception));
        }            
    }
    
    function actionFailure_Grid_Order(args) {
        try {
            zAlert(args.error.responseText);
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "actionFailure_Grid_Order", exception));
        }
    }    

    function load_Grid_Order(args) {
        try {            
            var culture = "@System.Globalization.CultureInfo.CurrentCulture.Name";
            this.model.locale = culture;
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "load_Grid_Order", exception));
        }
    }

    function toolbarClick_Grid_Order(sender) {
        try {
            var toolbar = $(sender.target);
            var ejGrid = $("#Grid_Order").data("ejGrid");

            if (toolbar.prop("id") == "Grid_Order_Toolbar_Refresh") {
                ejGrid.refreshContent();
            } else if (toolbar.prop("id") == "Grid_Order_Toolbar_Read") {
                var records = ejGrid.getSelectedRecords();
                if (records.length == 1) {
                    var args = { requestType: "read", data: records[0] };
                    actionBegin_Grid_Order(args);
                }
            }
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "toolbarClick_Grid_Order", exception));
        }
    }
</script>
