@model AuditTrailLogItemModel

@{
    string CSHTML = "_AuditTrailLogItem.cshtml";
}

<div id="Item_AuditTrailLog">
    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.ControllerAction, new { id = "AuditTrailLog_Item_ControllerAction" })
    @Html.ZHiddenFor(model => model.IsReadOnly, "AuditTrailLog_Item_IsReadOnly")
    @Html.ZHiddenFor(model => model.IsSave, "AuditTrailLog_Item_IsSave")

    @{Html.EJ().Tab("Tab_AuditTrailLog")
        .ClientSideEvents(clientEvent => clientEvent
            .ItemActive("itemActive_Tab_AuditTrailLog")
        )
        //.EnablePersistence()
        .Items(data =>
        {
            data.Add().ID("TabSheet_AuditTrailLog_AuditTrailLog").Text(AuditTrailLogResources.EntitySingular).ContentTemplate(@<div class="@AppDefaults.CssClassPanel">
                
                <div id="Group_AuditTrailLog_Id" class="@AppDefaults.CssClassGroup @AuditTrailLog.DataProfile.EditWidthCSSFor("Id")">
                    @Html.LabelFor(model => model.AuditTrailLog.Id, new { @class = AppDefaults.CssClassLabelRequired })
                    @Html.EditorFor(model => model.AuditTrailLog.Id, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "AuditTrailLog_Id" } })
                    @* @Html.ValidationMessageFor(model => model.AuditTrailLog.Id, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_AuditTrailLog_LogDate" class="@AppDefaults.CssClassGroup @AuditTrailLog.DataProfile.EditWidthCSSFor("LogDate")">
                    @Html.LabelFor(model => model.AuditTrailLog.LogDate, new { @class = AppDefaults.CssClassLabel })
                    @* @Html.EditorFor(model => model.AuditTrailLog.LogDate, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "AuditTrailLog_LogDate" } }) *@
                    @Html.EJ().DateTimePickerFor(model => model.AuditTrailLog.LogDate, AppHelper.DateTimeModel, new { id = "AuditTrailLog_LogDate" })
                    @* @Html.ValidationMessageFor(model => model.AuditTrailLog.LogDate, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_AuditTrailLog_LogTime" class="@AppDefaults.CssClassGroup @AuditTrailLog.DataProfile.EditWidthCSSFor("LogTime")">
                    @Html.LabelFor(model => model.AuditTrailLog.LogTime, new { @class = AppDefaults.CssClassLabel })
                    @* @Html.EditorFor(model => model.AuditTrailLog.LogTime, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "AuditTrailLog_LogTime" } }) *@
                    @Html.EJ().DateTimePickerFor(model => model.AuditTrailLog.LogTime, AppHelper.DateTimeModel, new { id = "AuditTrailLog_LogTime" })
                    @* @Html.ValidationMessageFor(model => model.AuditTrailLog.LogTime, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_AuditTrailLog_LogUserName" class="@AppDefaults.CssClassGroup @AuditTrailLog.DataProfile.EditWidthCSSFor("LogUserName")">
                    @Html.LabelFor(model => model.AuditTrailLog.LogUserName, new { @class = AppDefaults.CssClassLabel })
                    @Html.EditorFor(model => model.AuditTrailLog.LogUserName, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "AuditTrailLog_LogUserName" } })
                    @* @Html.ValidationMessageFor(model => model.AuditTrailLog.LogUserName, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>

                @Html.ZNewLine()
                
                <div id="Group_AuditTrailLog_LogDomain" class="@AppDefaults.CssClassGroup @AuditTrailLog.DataProfile.EditWidthCSSFor("LogDomain")">
                    @Html.LabelFor(model => model.AuditTrailLog.LogDomain, new { @class = AppDefaults.CssClassLabel })
                    @Html.EditorFor(model => model.AuditTrailLog.LogDomain, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "AuditTrailLog_LogDomain" } })
                    @* @Html.ValidationMessageFor(model => model.AuditTrailLog.LogDomain, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_AuditTrailLog_LogEntity" class="@AppDefaults.CssClassGroup @AuditTrailLog.DataProfile.EditWidthCSSFor("LogEntity")">
                    @Html.LabelFor(model => model.AuditTrailLog.LogEntity, new { @class = AppDefaults.CssClassLabel })
                    @Html.EditorFor(model => model.AuditTrailLog.LogEntity, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "AuditTrailLog_LogEntity" } })
                    @* @Html.ValidationMessageFor(model => model.AuditTrailLog.LogEntity, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>

                @Html.ZNewLine()
                
                <div id="Group_AuditTrailLog_LogOperation" class="@AppDefaults.CssClassGroup @AuditTrailLog.DataProfile.EditWidthCSSFor("LogOperation")">
                    @Html.LabelFor(model => model.AuditTrailLog.LogOperation, new { @class = AppDefaults.CssClassLabel })
                    @Html.EditorFor(model => model.AuditTrailLog.LogOperation, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "AuditTrailLog_LogOperation" } })
                    @* @Html.ValidationMessageFor(model => model.AuditTrailLog.LogOperation, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_AuditTrailLog_LogId" class="@AppDefaults.CssClassGroup @AuditTrailLog.DataProfile.EditWidthCSSFor("LogId")">
                    @Html.LabelFor(model => model.AuditTrailLog.LogId, new { @class = AppDefaults.CssClassLabel })
                    @Html.EditorFor(model => model.AuditTrailLog.LogId, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "AuditTrailLog_LogId" } })
                    @* @Html.ValidationMessageFor(model => model.AuditTrailLog.LogId, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                @Html.ZNewLine()

                <div id="Group_AuditTrailLog_LogEntityBefore" class="@AppDefaults.CssClassGroup @AuditTrailLog.DataProfile.EditWidthCSSFor("LogEntityBefore")">
                    @Html.LabelFor(model => model.AuditTrailLog.LogEntityBefore, new { @class = AppDefaults.CssClassLabel })
                    @Html.EditorFor(model => model.AuditTrailLog.LogEntityBefore, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "AuditTrailLog_LogEntityBefore" } })
                    @* @Html.ValidationMessageFor(model => model.AuditTrailLog.LogEntityBefore, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                @Html.ZNewLine()

                <div id="Group_AuditTrailLog_LogEntityAfter" class="@AppDefaults.CssClassGroup @AuditTrailLog.DataProfile.EditWidthCSSFor("LogEntityAfter")">
                    @Html.LabelFor(model => model.AuditTrailLog.LogEntityAfter, new { @class = AppDefaults.CssClassLabel })
                    @Html.EditorFor(model => model.AuditTrailLog.LogEntityAfter, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "AuditTrailLog_LogEntityAfter" } })
                    @* @Html.ValidationMessageFor(model => model.AuditTrailLog.LogEntityAfter, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>

            </div>);
        })
        .Render();
    }
</div>

<script>
    // Validate hidden fields
    $.validator.setDefaults({ ignore: null });
    // Parse validators
    $.validator.unobtrusive.parse($("#ZAjax"));

    $(function () {
        try {
            ej.widget.init($("#Item_AuditTrailLog"));

            var model = @Html.Raw(JsonConvert.SerializeObject(Model));
            var dataProfile = @Html.Raw(JsonConvert.SerializeObject(AuditTrailLog.DataProfile));
            var controllerAction = model.ControllerAction == null ? "" : model.ControllerAction.toLowerCase();

            var ajaxUrl = "";

            if (controllerAction != "create" || dataProfile.Class.IsIdentity) {
                $("#Group_AuditTrailLog_Id").hide();
            }

            // Associations (FK)

            zOnItemView(model, dataProfile);
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "function", exception));
        }
    });

    function itemActive_Tab_AuditTrailLog(args) {
        try {
            //var item = "$ej$ejTab" + "Tab_AuditTrailLog";
            //zLocalStorageSet(item, '{"selectedItemIndex":' + args.model.selectedItemIndex.toString() + ',"addToPersist":["selectedItemIndex"]}');
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "itemActive_Tab_AuditTrailLog", exception));
        }
    }
</script>
