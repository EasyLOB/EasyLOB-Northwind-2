@model OrderDetailItemModel

@{
    string CSHTML = "_OrderDetailItem.cshtml";
    string orderText = Model.OrderDetail == null ? "" : (Model.OrderDetail.OrderLookupText ?? "");
    string productText = Model.OrderDetail == null ? "" : (Model.OrderDetail.ProductLookupText ?? "");
}

<div id="Item_OrderDetail">
    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.ControllerAction, new { id = "OrderDetail_Item_ControllerAction" })
    @Html.ZHiddenFor(model => model.IsReadOnly, "OrderDetail_Item_IsReadOnly")
    @Html.ZHiddenFor(model => model.IsSave, "OrderDetail_Item_IsSave")
    @Html.HiddenFor(model => model.MasterOrderId, new { id = "OrderDetail_Item_MasterOrderId" })
    @Html.HiddenFor(model => model.MasterProductId, new { id = "OrderDetail_Item_MasterProductId" })

    @{Html.EJ().Tab("Tab_OrderDetail")
        .ClientSideEvents(clientEvent => clientEvent
            .ItemActive("itemActive_Tab_OrderDetail")
        )
        //.EnablePersistence()
        .Items(data =>
        {
            data.Add().ID("TabSheet_OrderDetail_OrderDetail").Text(OrderDetailResources.EntitySingular).ContentTemplate(@<div class="@AppDefaults.CssClassPanel">
                
                <div id="Group_OrderDetail_OrderId" class="@AppDefaults.CssClassGroup @OrderDetail.DataProfile.EditWidthCSSFor("OrderLookupText")">
                    @Html.LabelFor(model => model.OrderDetail.OrderId, new { @class = AppDefaults.CssClassLabelRequired })
                    @Html.EditorFor(model => model.OrderDetail.OrderId, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "OrderDetail_OrderId" } })
                    @{
                        Html.RenderAction("Lookup", "Order", new
                        {
                            Text = orderText,
                            ValueId = "OrderDetail_OrderId"
                        });
                    }
                    @* @Html.ValidationMessageFor(model => model.OrderDetail.OrderId, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_OrderDetail_ProductId" class="@AppDefaults.CssClassGroup @OrderDetail.DataProfile.EditWidthCSSFor("ProductLookupText")">
                    @Html.LabelFor(model => model.OrderDetail.ProductId, new { @class = AppDefaults.CssClassLabelRequired })
                    @Html.EditorFor(model => model.OrderDetail.ProductId, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "OrderDetail_ProductId" } })
                    @{
                        Html.RenderAction("Lookup", "Product", new
                        {
                            Text = productText,
                            ValueId = "OrderDetail_ProductId"
                        });
                    }
                    @* @Html.ValidationMessageFor(model => model.OrderDetail.ProductId, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_OrderDetail_UnitPrice" class="@AppDefaults.CssClassGroup @OrderDetail.DataProfile.EditWidthCSSFor("UnitPrice")">
                    @Html.LabelFor(model => model.OrderDetail.UnitPrice, new { @class = AppDefaults.CssClassLabelRequired })
                    @Html.EditorFor(model => model.OrderDetail.UnitPrice, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "OrderDetail_UnitPrice" } })
                    @* @Html.ValidationMessageFor(model => model.OrderDetail.UnitPrice, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_OrderDetail_Quantity" class="@AppDefaults.CssClassGroup @OrderDetail.DataProfile.EditWidthCSSFor("Quantity")">
                    @Html.LabelFor(model => model.OrderDetail.Quantity, new { @class = AppDefaults.CssClassLabelRequired })
                    @Html.EditorFor(model => model.OrderDetail.Quantity, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "OrderDetail_Quantity" } })
                    @* @Html.ValidationMessageFor(model => model.OrderDetail.Quantity, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>
                
                <div id="Group_OrderDetail_Discount" class="@AppDefaults.CssClassGroup @OrderDetail.DataProfile.EditWidthCSSFor("Discount")">
                    @Html.LabelFor(model => model.OrderDetail.Discount, new { @class = AppDefaults.CssClassLabelRequired })
                    @Html.EditorFor(model => model.OrderDetail.Discount, new { htmlAttributes = new { @class = AppDefaults.CssClassEditor, id = "OrderDetail_Discount" } })
                    @* @Html.ValidationMessageFor(model => model.OrderDetail.Discount, "", new { @class = AppDefaults.CssClassValidator }) *@
                </div>

            </div>);
        })
        .Render();
    }
</div>

<script>
    // Validate hidden fields
    $.validator.setDefaults({ ignore: null });
    // Parse validators
    $.validator.unobtrusive.parse($("#ZAjax"));

    $(function () {
        try {

            debugger;

            ej.widget.init($("#Item_OrderDetail"));

            var model = @Html.Raw(JsonConvert.SerializeObject(Model));
            var dataProfile = @Html.Raw(JsonConvert.SerializeObject(OrderDetail.DataProfile));
            var controllerAction = model.ControllerAction == null ? "" : model.ControllerAction.toLowerCase();

            var ajaxUrl = "";

            if (controllerAction != "create" || dataProfile.Class.IsIdentity) {
                $("#Group_OrderDetail_OrderId").hide();
                //$("#Group_OrderDetail_ProductId").hide(); // !!!
            }

            // Associations (FK)
            // Order
            if (model.MasterOrderId != null) {
                $("#OrderDetail_OrderId").val(model.MasterOrderId);
                $("#Group_OrderDetail_OrderId").hide();            
            }
            // Product
            if (model.MasterProductId != null) {
                $("#OrderDetail_ProductId").val(model.MasterProductId);
                $("#Group_OrderDetail_ProductId").hide();            
            }

            zOnItemView(model, dataProfile);        
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "function", exception));
        }
    });    

    function itemActive_Tab_OrderDetail(args) {
        zTabDictionaryWrite("OrderDetail", args.model.selectedItemIndex);

        try {
        } catch (exception) {
            zAlert(zExceptionMessage("@CSHTML", "itemActive_Tab_OrderDetail", exception));
        }
    }
</script>
